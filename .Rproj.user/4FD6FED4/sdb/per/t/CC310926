{
    "collab_server" : "",
    "contents" : "#' @title Convert ICD code(s)\n#'\n#' @author Daniel Lindholm\n#'\n#' @description Converting ICD codes between the ICD-9 and ICD-10 classifications is not entirely\n#' trivial. There are about twice as many codes in ICD-10 compared to ICD-9. In addition,\n#' several countries have constructed their own variants of the classification systems.\n#' This function will try to convert ICD codes between the two definitions, with a possibility\n#' to specify how flexible the translation should be. The function also has multicore support, to\n#' reduce computing time when analyzing large datasets. Also, if an\n#' ICD code is not found in the database on its 4-digit representation, the function will\n#' also try to find a 3-digit code by keeping only the first three characters in the code.\n#' It will work only with the 'clean' original versions of ICD, i.e. country-specific codes\n#' have to be converted into a style that the function understands; e.g. \"I259\" for ICD10, \"4149\"\n#' for ICD9.\n#' #'\n#' @param ICDcode a vector containing the ICD codes that should be converted. The\n#' code must not contain dots (which are common in some countries representation of the ICD10 system).\n#' @param from What is the source classification: \"icd10\" or \"icd9\"? Defaults to \"icd10\".\n#' @param to What is the destination classification: \"icd10\" or \"icd9\"? Defaults to \"icd9\".\n#' @param flexibility Takes either of the following values: 0, 1, 2:\n#'        \\itemize{\n#'            \\item 0 means no flexibility at all, i.e. the content in ICD9 and ICD10 codes\n#'            must match perfectly; this will probably induce quite many NAs.\n#'            \\item 1 means that the function accepts that either the ICD10 or the ICD9\n#'            code more precisely describes the diagnosis.\n#'            \\item 2 corresponds to the most flexible conversion, where the function accepts\n#'            that e.g. an ICD10 code is most properly described by several ICD9 codes, or vice versa.\n#'        }\n#'        Defaults to 1.\n#' @param cores The number of processor cores to use. Multicore functionality is\n#' available on all unix platforms (e.g. MacOSX, Linux), but not on Windows. Defaults to 1.\n#' @return Outputs a character vector containing the converted ICD codes.\n#' @examples\n#' # Simple example of converting from ICD10 to ICD9:\n#' convertICD(\"I259\")\n#'\n#' # Run on several processor cores (doesn't make sense with only 4 codes, of course):\n#' test_codes <- c(\"I10\", \"I259\", \"C820\", \"E669\")\n#' convertICD(test_codes, cores = 4)\n#'\n#' @export\n\nconvertICD <- function(ICDcode, from = \"icd10\", to = \"icd9\", flexibility = 1, cores = 1){\n  # Load data.table\n  library(data.table)\n  #data(cICD)\n  # Checks\n  if (from != \"icd10\" & from != \"icd9\") stop(\"from should either be 'icd9' or 'icd10'!\")\n  if (to != \"icd10\" & to != \"icd9\") stop(\"to should either be 'icd9' or 'icd10'!\")\n  if (from == to) stop(\"from and to can't take on the same value!\")\n  if (!is.numeric(flexibility)) stop(\"flexibility should be numeric!\")\n  if (!is.element(flexibility, c(0,1,2))) stop(\"flexibility takes on one of the following only: 0, 1, 2\")\n  if(!is.numeric(cores)) stop(\"cores should be numeric!\")\n  if(cores > 1 & .Platform$OS.type != \"unix\"){\n    warning(\"Multicore functionality only available in unix-like environments. Proceeding with only one core.\")\n    cores <- 1\n  }\n  if (from == \"icd10\") setkey(cICD, icd10)\n  if (from == \"icd9\") setkey(cICD, icd9)\n  # Parallel version\n  if(cores > 1){\n    library(parallel)\n    result <- mclapply(ICDcode, function(x) .internal_convertICD(x, from = from, to = to, flexibility = flexibility), mc.cores = cores)\n  }\n  # Non-parallel version\n  if(cores < 2){\n    result <- lapply(ICDcode, function(x) .internal_convertICD(x, from = from, to = to, flexibility = flexibility))\n  }\n  return(unlist(result))\n}\n",
    "created" : 1473300411768.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1896676772",
    "id" : "CC310926",
    "lastKnownWriteTime" : 1473304681,
    "last_content_update" : 1473304681501,
    "path" : "~/R/packages/convertICD/R/convertICD.R",
    "project_path" : "R/convertICD.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}